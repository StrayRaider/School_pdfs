{\rtf1\ansi\ansicpg1254\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 __________Link List Rek\'fcrsif______\
#include <stdio.h>\
struct node\
\{\
    int data;\
    struct node *next;\
\};\
\
struct node *ilk=NULL, *son=NULL;\
\
void SonaEkle(int a)\
\{\
    struct node *yeni = (struct node*) malloc(sizeof(struct node));\
    yeni->data=a;\
    if(ilk==NULL)\
    \{\
        ilk=yeni;\
        son=yeni;\
        son->next=NULL;\
    \}\
    else\
    \{\
        son->next=yeni;\
        son=yeni;\
        son->next=NULL;\
    \}\
\}\
\
void RecListele(struct node *liste)\
\{\
    printf("%d ",liste->data);\
    if (liste!=son)\
        RecListele(liste->next);\
\}\
\
int main()\
\{\
    SonaEkle(1);\
    SonaEkle(2);\
    SonaEkle(3);\
    SonaEkle(4);\
    SonaEkle(5);\
    SonaEkle(6);\
    printf("\\n");\
    RecListele(ilk);\
\
\}\
\
\
______________Quick Sort____________\
\
#include <stdio.h>\
void print_array(int *A, int n) \{\
	int i;\
	for (i = 0 ; i < n ; i++)\
		printf("%d ", A[i]);\
\}\
\
int bol(int * A, int ilk, int son) \{\
\
	int i = ilk - 1;\
	int j = son;\
	int v = A[ilk];\
	int tmp;\
\
	while (1) \{\
		while ( A[i] <= v && i <= son)\
			i++;\
\
		while ( A[j] > v)\
			j--;\
\
		if ( i >= j )\
			break;\
\
		tmp = A[i];\
		A[i] = A[j];\
		A[j] = tmp;\
	\}\
\
	tmp = A[ilk];\
	A[ilk] = A[j];\
	A[j] = tmp;\
\
	return j;\
\}\
\
void quick_sort(int * A, int ilk, int son) \{\
	if (son <= ilk)\
		return;\
	int j = bol(A, ilk, son);\
\
	quick_sort(A, ilk, j-1);\
	quick_sort(A, j+1, son);\
\}\
\
int main() \{\
\
	int A[8] = \{8, 4, 9, 3, 1, 2, 5, 6\};\
\
	printf("sirasiz: ");\
	print_array(A, 8);\
	printf("\\n");\
\
	quick_sort(A, 0, 7);\
\
	printf("\\nsiralanmis: ");\
	print_array(A, 8);\
	printf("\\n");\
\
	return 0;\
\}\
\
______________________Merge_sort______________\
\
#include<stdlib.h>\
#include<stdio.h>\
\
void merge(int arr[], int l, int m, int r)\
\{\
    int i, j, k;\
    int n1 = m - l + 1;\
    int n2 =  r - m;\
\
    int L[n1], R[n2];\
\
    for (i = 0; i < n1; i++)\
        L[i] = arr[l + i];\
    for (j = 0; j < n2; j++)\
        R[j] = arr[m + 1+ j];\
\
\
    i = 0;\
    j = 0;\
    k = l;\
    while (i < n1 && j < n2)\
    \{\
        if (L[i] <= R[j])\
        \{\
            arr[k] = L[i];\
            i++;\
        \}\
        else\
        \{\
            arr[k] = R[j];\
            j++;\
        \}\
        k++;\
    \}\
\
    while (i < n1)\
    \{\
        arr[k] = L[i];\
        i++;\
        k++;\
    \}\
\
\
    while (j < n2)\
    \{\
        arr[k] = R[j];\
        j++;\
        k++;\
    \}\
\}\
\
\
void mergeSort(int arr[], int l, int r)\
\{\
    if (l < r)\
    \{\
        int m = l+(r-l)/2;\
        mergeSort(arr, l, m);\
        mergeSort(arr, m+1, r);\
        merge(arr, l, m, r);\
    \}\
\}\
\
void printArray(int A[], int size)\
\{\
    int i;\
    for (i=0; i < size; i++)\
        printf("%d ", A[i]);\
    printf("\\n");\
\}\
\
\
int main()\
\{\
    int arr[] = \{10, 99, 9, 5, 6, 7,1,3,8\};\
    int arr_size = sizeof(arr)/sizeof(arr[0]);\
\
    printf("Given array is \\n");\
    printArray(arr, arr_size);\
\
    mergeSort(arr, 0, arr_size - 1);\
\
    printf("\\nSorted array is \\n");\
    printArray(arr, arr_size);\
    return 0;\
\}\
\
__________________Hanoi_tower__________\
\
#include <stdio.h>\
\
void towers(int, char, char, char);\
\
int main()\
\{\
    int num;\
\
    printf("disk say\uc0\u305 s\u305  : ");\
    scanf("%d", &num);\
    printf("Hanoi kulesi ad\uc0\u305 mlar\u305 :\\n");\
    towers(num, 'A', 'C', 'B');\
    return 0;\
\}\
void towers(int num, char frompeg, char topeg, char auxpeg)\
\{\
    if (num == 1)\
    \{\
        printf("\\nDisk 1 %c pladakan  %c plakaya ta\uc0\u351 \u305 ", frompeg, topeg);\
        return;\
    \}\
    towers(num - 1, frompeg, auxpeg, topeg);\
    printf("\\nDisk %d %c plakadan  %c plakaya ta\uc0\u351 \u305 ", num, frompeg, topeg);\
    towers(num - 1, auxpeg, topeg, frompeg);\
\}\
\
}