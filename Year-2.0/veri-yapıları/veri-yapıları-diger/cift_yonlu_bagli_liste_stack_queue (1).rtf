{\rtf1\ansi\ansicpg1254\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ___________________\'e7ift_yonlu__________\
#include <stdio.h>\
struct node\
\{\
    int data;\
    struct node *next;\
    struct node *prev;\
\};\
\
struct node *ilk=NULL, *son=NULL;\
\
void SonaEkle(int a)\
\{\
    struct node *yeni = (struct node*) malloc(sizeof(struct node));\
    yeni->data=a;\
    if(ilk==NULL)\
    \{\
        ilk=yeni;\
        son=yeni;\
        son->next=son;\
        son->prev=ilk;\
    \}\
    else\
    \{\
        son->next=yeni;\
        yeni->prev=son;\
        yeni->next=ilk;\
        ilk->prev=yeni;\
        son=yeni;\
\
    \}\
\}\
\
\
\
void Listele()\
\{\
    struct node *liste=ilk;\
    while(liste->next!=ilk)\
    \{\
        printf("%d\\t",liste->data);\
        liste=liste->next;\
    \}\
    printf("%d\\t",liste->data);\
\}\
\
void Sil(int x)\
\{\
    struct node *sil=ilk;\
    while(sil!=NULL)\
    \{\
        if(sil->data==x) break;\
        else\
        \{\
            sil=sil->next;\
        \}\
    \}\
\
    if(sil!=NULL)\
    \{\
        if(sil==ilk)\
        \{\
            sil->prev->next=sil->next;\
            sil->next->prev=sil->prev;\
            ilk=ilk->next;\
\
        \}\
        else if(sil==son)\
        \{\
            sil->prev->next=sil->next;\
            sil->next->prev=sil->prev;\
            son=son->prev;\
        \}\
        else\
        \{\
            sil->prev->next=sil->next;\
            sil->next->prev=sil->prev;\
        \}\
\
        free(sil);\
    \}\
\
\
\}\
\
int main()\
\{\
\
    SonaEkle(5);\
    SonaEkle(3);\
    SonaEkle(2);\
    SonaEkle(4);\
    SonaEkle(1);\
    printf("\\n");\
    Listele();\
    Sil(1);\
    printf("\\n");\
    Listele();\
    Sil(5);\
    printf("\\n");\
    Listele();\
\}\
\
________________________stack_link_list___________________\
#include <stdio.h>\
struct node\
\{\
    int data;\
    struct node *next;\
\};\
\
struct node *ilk=NULL, *son=NULL;\
\
void Push(int a)\
\{\
    struct node *yeni = (struct node*) malloc(sizeof(struct node));\
    yeni->data=a;\
    if(ilk==NULL)\
    \{\
        ilk=yeni;\
        son=yeni;\
        son->next=NULL;\
    \}\
    else\
    \{\
        son->next=yeni;\
        son=yeni;\
    \}\
\}\
\
void Pop()\
\{\
    if(ilk!=NULL)\
    \{\
        struct node *sil=son,*once=ilk;\
        while(once->next!=sil && once->next!=NULL)\
            once=once->next;\
        once->next=NULL;\
        son=once;\
        if(ilk==sil) ilk=NULL;\
\
        free(sil);\
    \}\
    else\
    printf("y\uc0\u305 \u287 \u305 n bo\u351 ");\
\
\}\
\
\
void Listele()\
\{\
    struct node *liste=ilk;\
    while(liste!=NULL)\
    \{\
        printf("%d\\t",liste->data);\
        liste=liste->next;\
    \}\
\
\}\
\
\
int main()\
\{\
\
    Push(1);\
    Push(5);\
    Push(6);\
    Pop();\
    Push(7);\
    Pop();\
    Pop();\
    Push(9);\
    Pop();\
    Pop();\
    Pop();\
    printf("\\n");\
    Listele();\
\
\}\
\
_______________________stack_array_________\
\
#include<stdio.h>\
int SP=-1;\
void Push(int dizi[],int a)\
\{\
   if (SP<10)\
    \{\
      SP++;\
      dizi[SP]=a;\
    \}\
\}\
int Pop(int dizi[])\
\{\
  if(SP>=0)\
    \{\
       int gonder=dizi[SP];\
       SP--;\
       return gonder;\
    \}\
\
\}\
Listele(int dizi[])\
\{\
 for(int i=0; i<=SP;i++)\
   printf(" %d",dizi[i]);\
\
\}\
int main()\
\{\
   int yigin[10];\
\
   Push(yigin,20);\
   Push(yigin,30);\
   Push(yigin,10);\
   Push(yigin,2);\
   Push(yigin,25);\
   Listele(yigin);\
   int a=Pop(yigin);\
   printf("\\n");\
   Listele(yigin);\
\}\
\
____________________kuyruk_dizi______\
\
#include<stdio.h>\
int on=0,arka=0,eleman=0;\
int dizi[10];\
\
void Ekle(int a)\
\{\
    if(eleman<10)\
    \{\
        dizi[arka]=a;\
        arka++;\
        eleman++;\
        if(arka>9) arka=0;\
    \}\
\}\
int Cikar()\
\{\
    if(eleman>0)\
    \{\
        int gonder=dizi[on];\
        on++;\
        if(on>9) on=0;\
        eleman--;\
        return gonder;\
    \}\
\}\
void Listele()\
\{\
    int i=on;\
    while(i!=arka)\
    \{\
        printf("%d ",dizi[i]);\
        i++;\
         if(i>9)  i=0;\
\
    \}\
\}\
int main()\
\{\
    Ekle(1);\
    Ekle(2);\
    Ekle(3);\
    Ekle(4);\
    Ekle(5);\
    Ekle(6);\
    Ekle(7);\
    Ekle(8);\
    Ekle(9);\
    Cikar();\
     Cikar();\
      Cikar();\
       Cikar();\
   Ekle(123);\
   Cikar();\
\
\
    printf("\\n");\
    Listele();\
\
\}\
\
____________________kuyruk_ba\uc0\u287 l\u305 _liste____________\
\
#include <stdio.h>\
struct node\
\{\
    int data;\
    struct node *next;\
\};\
\
struct node *ilk=NULL, *son=NULL;\
\
void Ekle(int a)\
\{\
    struct node *yeni = (struct node*) malloc(sizeof(struct node));\
    yeni->data=a;\
    if(ilk==NULL)\
    \{\
        ilk=yeni;\
        son=yeni;\
        son->next=NULL;\
    \}\
    else\
    \{\
        son->next=yeni;\
        son=yeni;\
        son->next=NULL;\
    \}\
\}\
\
void Cikar()\
\{\
    struct node *sil;\
    if(ilk!=NULL)\
    \{\
        sil=ilk;\
        ilk=ilk->next;\
        free(sil);\
\
    \}\
\
\}\
\
\
void Listele()\
\{\
    struct node *liste=ilk;\
    while(liste!=NULL)\
    \{\
        printf("%d\\t",liste->data);\
        liste=liste->next;\
    \}\
\
\}\
\
\
int main()\
\{\
\
    Ekle(1);\
    Ekle(2);\
    Ekle(3);\
    Cikar();\
    Cikar();\
    Cikar();\
   Ekle(11);\
   Ekle(22);\
    Ekle(32);\
\
\
\
    printf("\\n");\
    Listele();\
\
\}\
\
_______________________stack_linklist_II.ogr_listenin ba\uc0\u351 \u305 na ekle \'e7ek\
\
\
#include <stdio.h>\
struct node\
\{\
    int data;\
    struct node *next;\
\};\
\
struct node *ilk=NULL, *son=NULL;\
\
void Push(int a)\
\{\
    struct node *yeni = (struct node*) malloc(sizeof(struct node));\
    yeni->data=a;\
    if(ilk==NULL)\
    \{\
        ilk=yeni;\
        ilk->next=NULL;\
        son=ilk;\
    \}\
    else\
    \{\
        yeni->next=ilk;\
        ilk=yeni;\
    \}\
\}\
\
\
\
int Pop()\
\{\
    struct node *sil=ilk;\
    ilk=ilk->next;\
    free(sil);\
\
\}\
\
\
void Listele()\
\{\
    struct node *liste=ilk;\
    while(liste!=NULL)\
    \{\
        printf("%d\\t",liste->data);\
        liste=liste->next;\
    \}\
\}\
\
int main()\
\{\
    Push(1);\
    Push(2);\
    Push(3);\
    Pop();\
    Pop();\
    Push(4);\
    Push(5);\
    Pop();\
    Push(7);\
    printf("\\n");\
    Listele();\
\}\
______________________\
\
}